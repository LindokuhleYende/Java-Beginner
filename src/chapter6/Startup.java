package chapter6;

import java.util.ArrayList;

/**
 * Startup class represents a single startup company in the game.
 * Each startup occupies multiple grid positions and can be "hit" and eventually "killed" (sunk).
 * This is analogous to a ship in Battleship - it has multiple segments that must all be destroyed.
 */
public class Startup {
    // STORES THE GRID POSITIONS WHERE THIS STARTUP IS LOCATED
    // Contains coordinates like ["a0", "a1", "a2"] for a horizontal startup
    // or ["a0", "b0", "c0"] for a vertical startup
    private ArrayList<String> locationCells;

    // THE NAME/IDENTIFIER OF THIS STARTUP COMPANY
    // Used for display messages when startup is sunk
    private String name;

    /**
     * Sets the grid locations where this startup is positioned
     * @param loc - ArrayList of coordinate strings (e.g., ["a0", "a1", "a2"])
     */
    public void setLocationCells(ArrayList<String> loc) {
        // ASSIGN THE GRID POSITIONS TO THIS STARTUP
        // These positions are generated by GameHelper.placeStartup()
        locationCells = loc;
    }

    /**
     * Sets the name/identifier for this startup company
     * @param n - The startup's name (e.g., "poniez", "hacqi", "cabista")
     */
    public void setName(String n) {
        // STORE THE STARTUP'S NAME FOR DISPLAY PURPOSES
        name = n;
    }

    /**
     * Processes a player's guess against this startup's locations
     * This is the core game mechanic method that determines hit/miss/kill
     * @param userInput - The coordinate guessed by player (e.g., "a3")
     * @return "miss", "hit", or "kill" depending on the result
     */
    public String checkYourself(String userInput) {
        // DEFAULT ASSUMPTION - PLAYER MISSED THIS STARTUP
        String result = "miss";

        // CHECK IF THE GUESSED COORDINATE MATCHES ANY OF OUR LOCATIONS
        // indexOf() returns the position in the list, or -1 if not found
        int index = locationCells.indexOf(userInput);

        // IF THE GUESS MATCHES ONE OF OUR LOCATIONS (index >= 0)
        if (index >= 0) {
            // SUCCESSFUL HIT! REMOVE THIS LOCATION FROM OUR LIST
            // This represents "damaging" that part of the startup
            locationCells.remove(index);

            // CHECK IF ALL LOCATIONS HAVE BEEN DESTROYED
            if (locationCells.isEmpty()) {
                // STARTUP IS COMPLETELY DESTROYED
                result = "kill";

                // DISPLAY DESTRUCTION MESSAGE TO PLAYER
                System.out.println("Ouch! You sunk " + name + " : ( ");
            } else {
                // STARTUP IS DAMAGED BUT STILL ALIVE
                // Some locations remain, so it's just a hit
                result = "hit";
            } // end inner if
        } // end outer if

        // RETURN THE RESULT TO THE GAME CONTROLLER
        // Possible values: "miss", "hit", "kill"
        return result;
    } // end method

} // end class

/*
 * KEY CONCEPTS DEMONSTRATED:
 *
 * 1. ENCAPSULATION: Private data members with public setter methods
 *
 * 2. DYNAMIC DATA MANAGEMENT: ArrayList allows for dynamic removal of hit locations
 *
 * 3. STATE TRACKING: The startup "remembers" which parts have been hit by removing
 *    them from locationCells
 *
 * 4. GAME LOGIC: The isEmpty() check determines when a startup is completely destroyed
 *
 * 5. RETURN VALUES: Method returns different strings to communicate game state
 *    back to the calling code
 */